{"version":3,"sources":["components/Buttons/Buttons.module.css","components/Header/Header.jsx","components/Cell/Cell.jsx","components/Form/Form.jsx","components/PopUp/PopUp.jsx","components/PopUpEndOfTheGame/PopUpEndOfTheGame.jsx","components/Field/Field.jsx","utility/objects-helpers.js","redux/actions.js","redux/main-reducer.js","containers/FieldContainer.jsx","components/ResultTable/ResultTable.jsx","containers/ResultTableContainer.jsx","components/GameModeSwitches/GameModeSwitches.jsx","components/ButtonsForChooseModeGame/ButtonsForChooseModeGame.jsx","components/Buttons/Buttons.jsx","containers/ButtonsContainer.jsx","App.js","serviceWorker.js","redux/store.js","index.js","components/ResultTable/ResultTable.module.css","components/Cell/Cell.module.css","components/PopUp/PopUp.module.css","components/Header/Header.module.css"],"names":["module","exports","Header","className","styles","pseudo","Cell","startGameWithComputerTC","isStartGame","isGameWithComputer","id","xIsNext","value","onClickCell","isRoundStarted","onClick","disabled","cell","valueX","value0","ReduxForm","reduxForm","form","handleSubmit","popup","onSubmit","name","component","placeholder","input","button","PopUp","closePopUp","setNamesGamesTC","container","popupMain","span","formData","name1","gamer1","name2","gamer2","PopUpEndOfTheGame","exitTheGame","totalScore","allPointsGamer1","allPointsGamer2","Field","currentGame","isPopUpActive","cells","calculateWinner","squares","lines","i","length","a","b","c","startGame","type","onMovePlayer","setWinner","winner","initialState","games","winnerPointsGamer1","winnerPointsGamer2","mainReducer","state","action","newSquares","map","square","newArray","s","findId","conditionTrue","random","Math","floor","some","element","findNewElId","newSquaresGame","newSquaresAfterExit","newGames","newTableScore","newSquaresAfterContinue","newGamesArray","g","newTotalScore","reduce","sum","current","FieldContainer","props","clickOnCell","this","key","Component","connect","main","dispatch","getState","setTimeout","ResultTable","cellPadding","activeGame","undefined","GameModeSwitches","continueGame","wrapperForButtons","ButtonsForChooseModeGame","gameWithComputer","Buttons","fullness","status","wrapperForText","setWinnerTC","filter","sq","toUpperCase","App","Boolean","window","location","hostname","match","reducers","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c075489.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Buttons_container__3j5LS\",\"wrapperForButtons\":\"Buttons_wrapperForButtons__12wIO\",\"wrapperForText\":\"Buttons_wrapperForText__wAkpn\",\"button\":\"Buttons_button__3XU4d\"};","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nfunction Header() {\r\n\r\n    return <header className={styles.pseudo}>\r\n        TICK-TACK-TOE\r\n    </header>\r\n\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styles from './Cell.module.css';\r\n// import zero from '../../assets/O.jpg';\r\n// import cross from '../../assets/X.jpg';\r\n\r\nfunction Cell({\r\n                  startGameWithComputerTC, isStartGame, isGameWithComputer,\r\n                  id, xIsNext, value, onClickCell, isRoundStarted\r\n              }) {\r\n\r\n    let onClick = (id) => {\r\n        startGameWithComputerTC(id)\r\n    };\r\ndebugger\r\n    return (\r\n        <button onClick={() => isStartGame && !isGameWithComputer\r\n            ? onClickCell(id) : isGameWithComputer && xIsNext\r\n                ? onClick(id) : null}\r\n                disabled={value || !isRoundStarted}\r\n                className={styles.cell}>\r\n            <h2 className={value === 'X'?styles.valueX:styles.value0}> {value}\r\n                {/*{value && <img className={styles.img} src={value === 'X' ? cross : zero} alt={'hi'}/> }*/}\r\n            </h2>\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Cell;","import React from 'react';\r\nimport styles from \"../PopUp/PopUp.module.css\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\n\r\nconst Form = ({handleSubmit}) => {\r\n    return (\r\n        <form className={styles.popup} onSubmit={handleSubmit}>\r\n            <h3>HI!</h3>\r\n            <h4 className={styles.name}>\r\n                Enter your name, please:\r\n            </h4>\r\n            <div>\r\n                <Field name={'gamer1'} component='input'\r\n                       placeholder={'Gamer 1'} className={styles.input}/>\r\n            </div>\r\n            <h4 className={styles.name}>\r\n                Enter name your rival, please:\r\n            </h4>\r\n            <div>\r\n                <Field name={'gamer2'} component='input'\r\n                       placeholder={'Gamer 2'} className={styles.input}/>\r\n            </div>\r\n            <button className={styles.button}>\r\n                HERE GOES..!\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst ReduxForm = reduxForm({form: 'gamers'})(Form);\r\n\r\nexport default ReduxForm;","import React from 'react';\r\nimport styles from './PopUp.module.css';\r\nimport ReduxForm from \"../Form/Form\";\r\n\r\nfunction PopUp({closePopUp, setNamesGamesTC}) {\r\n\r\n    const onSubmit = (formData) => {\r\n        let name1 = formData.gamer1 ? formData.gamer1 : '';\r\n        let name2 = formData.gamer2 ? formData.gamer2 : '';\r\n        setNamesGamesTC(name1, name2);\r\n        closePopUp();\r\n    };\r\n\r\n    return <section className={styles.container}>\r\n        <article className={styles.popupMain}>\r\n            <span onClick={closePopUp} className={styles.span}>\r\n                X\r\n            </span>\r\n            <ReduxForm onSubmit={onSubmit}/>\r\n        </article>\r\n    </section>\r\n}\r\n\r\nexport default PopUp;","import React from 'react';\r\nimport styles from \"../PopUp/PopUp.module.css\";\r\n\r\nfunction PopUpEndOfTheGame({exitTheGame, totalScore, gamer1, gamer2}) {\r\n\r\n    const totalAllScore = () => {\r\n        if (totalScore.allPointsGamer1 > totalScore.allPointsGamer2) {\r\n            return 'Winner: ' + gamer1\r\n        } else if (totalScore.allPointsGamer1 < totalScore.allPointsGamer2) {\r\n            return 'Winner: ' + gamer2\r\n        } else {\r\n            return 'DEAD HEAT'\r\n        }\r\n    };\r\n\r\n    return <article className={styles.container}>\r\n        <section className={styles.popupMain}>\r\n            <span\r\n                onClick={exitTheGame}\r\n                className={styles.span}>\r\n                X\r\n            </span>\r\n\r\n            <section className={styles.popup}>\r\n\r\n                <h2>GAME OVER</h2>\r\n                <h3>{totalAllScore()}</h3>\r\n                <h4>Score: {totalScore.allPointsGamer1} : {totalScore.allPointsGamer2}</h4>\r\n                <h4>To return to the menu - close this window!</h4>\r\n\r\n            </section>\r\n\r\n        </section>\r\n    </article>\r\n}\r\n\r\nexport default PopUpEndOfTheGame;","import React from 'react';\r\nimport '../../App.css';\r\nimport PopUp from \"../PopUp/PopUp\";\r\nimport PopUpEndOfTheGame from \"../PopUpEndOfTheGame/PopUpEndOfTheGame\";\r\n\r\n\r\nconst Field = ({\r\n                   currentGame, exitTheGame, closePopUp, isPopUpActive, gamer1,\r\n                   gamer2, setNamesGamesTC, cells, totalScore, isRoundStarted\r\n               }) => {\r\n\r\n    return <article>\r\n\r\n        { currentGame === 5 && !isRoundStarted && <PopUpEndOfTheGame\r\n            exitTheGame={exitTheGame}\r\n            totalScore={totalScore}\r\n            gamer1={gamer1} gamer2={gamer2}\r\n        />}\r\n\r\n        {isPopUpActive && <PopUp\r\n            closePopUp={closePopUp}\r\n            setNamesGamesTC={setNamesGamesTC}/>}\r\n\r\n        <aside className=\"cells\">\r\n            {cells}\r\n        </aside>\r\n\r\n    </article>\r\n};\r\n\r\nexport default Field;","export const calculateWinner = (squares) => {\r\n    const lines = [\r\n        // [1, 2, 3],\r\n        // [4, 5, 6],\r\n        // [7, 8, 9],\r\n        // [1, 4, 7],\r\n        // [2, 5, 8],\r\n        // [3, 6, 9],\r\n        // [1, 5, 9],\r\n        // [3, 5, 7],\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a].value && squares[a].value === squares[b].value && squares[a].value === squares[c].value) {\r\n            return squares[a].value;\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n// export const stoppedGame = (squares, xIsNext, gamer1, gamer2) => {\r\n//     const winner = calculateWinner(squares);\r\n//     const fullness = squares.filter(sq => sq.value === null).length;\r\n//     let status = '';\r\n//     if (winner) {\r\n//         status = 'Winner : ' + (winner.toUpperCase() === \"X\" ? gamer1 : gamer2);\r\n//     } else if (!winner && fullness === 0) {\r\n//         status = '0 : 0 --- DRAW'\r\n//     } else {\r\n//         status = 'Next move : ' + (xIsNext ? gamer1 : gamer2);\r\n//     }\r\n//\r\n//     return status;\r\n// };\r\n// winner? status = 'Winner : ' + (winner.toUpperCase() === \"X\" ? gamer1 : gamer2):\r\n\r\n\r\n\r\n\r\n","export const CLICK_ON_CELL = 'CLICK_ON_CELL';\r\nexport const START_GAME = 'START_GAME';\r\nexport const CLOSE_POP_UP = 'CLOSE_POP_UP';\r\nexport const EXIT_THE_GAME = 'EXIT_THE_GAME';\r\nexport const CONTINUE_GAME = 'CONTINUE_GAME';\r\nexport const GAME_WITH_COMPUTER = 'GAME_WITH_COMPUTER';\r\nexport const SET_NAMES_GAMES = 'SET_NAMES_GAMES';\r\nexport const START_GAME_WITH_COMPUTER = 'START_GAME_WITH_COMPUTER';\r\nexport const MOVE_PLAYER = 'MOVE_PLAYER';\r\nexport const SET_WINNER = 'SET_WINNER';\r\nexport const SET_TOTAL_SCORE = 'SET_TOTAL_SCORE';\r\n\r\nexport const clickOnCell = (id) => ({type: CLICK_ON_CELL, id});\r\nexport const startGame = () => ({type: START_GAME});\r\nexport const closePopUp = () => ({type: CLOSE_POP_UP});\r\nexport const exitTheGame = () => ({type: EXIT_THE_GAME});\r\nexport const continueGame = () => ({type: CONTINUE_GAME});\r\nexport const gameWithComputer = () => ({type: GAME_WITH_COMPUTER});\r\nexport const setNamesGamesTC = (name1, name2) => ({type: SET_NAMES_GAMES, name1, name2});\r\nexport const startGameWithComputer = () => ({type: START_GAME_WITH_COMPUTER});\r\nexport const onMovePlayer = (id) => ({type: MOVE_PLAYER, id});\r\nexport const setWinner = (winner) => ({type: SET_WINNER, winner});\r\nexport const setTotalScore = () => ({type: SET_TOTAL_SCORE});","import {calculateWinner} from \"../utility/objects-helpers\";\r\nimport {\r\n    CLICK_ON_CELL, CLOSE_POP_UP, CONTINUE_GAME, EXIT_THE_GAME,\r\n    GAME_WITH_COMPUTER, MOVE_PLAYER, onMovePlayer,\r\n    SET_NAMES_GAMES, SET_TOTAL_SCORE, SET_WINNER, setTotalScore, setWinner, START_GAME,\r\n    START_GAME_WITH_COMPUTER, startGameWithComputer\r\n} from \"./actions\";\r\n\r\nconst initialState = {\r\n    squares: [\r\n        {id: 1, value: null}, {id: 2, value: null}, {id: 3, value: null},\r\n        {id: 4, value: null}, {id: 5, value: null}, {id: 6, value: null},\r\n        {id: 7, value: null}, {id: 8, value: null}, {id: 9, value: null},\r\n    ],\r\n    games: [\r\n        {id: 1, winnerPointsGamer1: 0, winnerPointsGamer2: 0},\r\n        {id: 2, winnerPointsGamer1: 0, winnerPointsGamer2: 0},\r\n        {id: 3, winnerPointsGamer1: 0, winnerPointsGamer2: 0},\r\n        {id: 4, winnerPointsGamer1: 0, winnerPointsGamer2: 0},\r\n        {id: 5, winnerPointsGamer1: 0, winnerPointsGamer2: 0},\r\n    ],\r\n    totalScore: {\r\n        allPointsGamer1: 0,\r\n        allPointsGamer2: 0,\r\n    },\r\n    xIsNext: true,\r\n    isStartGame: false,\r\n    isRoundStarted: false,\r\n    gamer1: 'Gamer 1',\r\n    gamer2: 'Gamer 2',\r\n    isPopUpActive: false,\r\n    isGameWithComputer: false,\r\n    currentGame: 0,\r\n};\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        // клик по кнопке при игре с другом\r\n        case CLICK_ON_CELL:\r\n            let newSquares = state.squares.map(square => (square.id === action.id)\r\n                ? {...square, value: state.xIsNext ?'X':'O'}: square);\r\n            return {\r\n                ...state,\r\n                squares: newSquares,\r\n                xIsNext: !state.xIsNext,\r\n            };\r\n\r\n            // нажали кнопку играть с другом\r\n        case START_GAME:\r\n            return {\r\n                ...state,\r\n                isStartGame: !state.isStartGame,//true\r\n                isPopUpActive: !state.isPopUpActive,//true\r\n                currentGame: state.currentGame + 1,//1,2,3,4,5// max5\r\n                isRoundStarted: true,//раунд начался !state.isRoundStarted\r\n            };\r\n\r\n            //ход игрока при игре с компьютером\r\n        case MOVE_PLAYER:\r\n            let newArray = state.squares.map(s => (s.id === action.id) ? {...s, value: 'X'} : s);\r\n            return {\r\n                ...state,\r\n                xIsNext: !state.xIsNext,\r\n                squares: newArray\r\n            };\r\n\r\n            ///нажали кнопку играть с компьютером\r\n        case GAME_WITH_COMPUTER:\r\n            return {\r\n                ...state,\r\n                isStartGame: !state.isStartGame,//true\r\n                gamer2: 'COMPUTER',\r\n                isGameWithComputer: !state.isGameWithComputer,//true\r\n                currentGame: state.currentGame + 1,\r\n                isRoundStarted: true,\r\n            };\r\n\r\n            // ход компьютера при игре с компьютером\r\n        case START_GAME_WITH_COMPUTER:\r\n            let findId = () => {\r\n                let i = 1;\r\n                let conditionTrue;\r\n                while (!conditionTrue) {\r\n                    let random = Math.floor(Math.random() * 9) + 1;\r\n                    conditionTrue = state.squares.some((element) => element.id === random && element.value === null);\r\n                    if (conditionTrue) {\r\n                        return random\r\n                    } else {\r\n                        i++;\r\n                    }\r\n                }\r\n            };\r\n            let findNewElId = findId();\r\n            let newSquaresGame = state.squares.map(square =>\r\n                square.id === findNewElId ? {...square, value: 'O'} : square);\r\n            return {\r\n                ...state,\r\n                squares: newSquaresGame,\r\n                xIsNext: !state.xIsNext,\r\n            };\r\n\r\n            // закрываем всплывающее окно\r\n        case CLOSE_POP_UP:\r\n            return {...state, isPopUpActive: !state.isPopUpActive};\r\n\r\n            //выходим из текущего режима(с компьютером или с другом) игры\r\n        case EXIT_THE_GAME:\r\n            let newSquaresAfterExit = state.squares.map(square => {\r\n                return {\r\n                    ...square,\r\n                    value: null,\r\n                }\r\n            });\r\n            let newGames = state.games.map(games => {\r\n                return {\r\n                    ...games,\r\n                    winnerPointsGamer1: 0,\r\n                    winnerPointsGamer2: 0,\r\n                }\r\n            });\r\n            let newTableScore = {\r\n                allPointsGamer1: 0,\r\n                allPointsGamer2: 0,\r\n            };\r\n            return {\r\n                ...state,\r\n                squares: newSquaresAfterExit,\r\n                games: newGames,\r\n                totalScore: newTableScore,\r\n                xIsNext: true,\r\n                isStartGame: false,\r\n                gamer1: 'Gamer 1',\r\n                gamer2: 'Gamer 2',\r\n                isPopUpActive: false,\r\n                isGameWithComputer: false,\r\n                currentGame: 0,\r\n                isRoundStarted: false,\r\n            };\r\n\r\n            //продолжаем игру(увеличиваем раунд) в выбранном режиме\r\n        case CONTINUE_GAME:\r\n            let newSquaresAfterContinue = state.squares.map(square => {\r\n                return {\r\n                    ...square,\r\n                    value: null,\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                squares: newSquaresAfterContinue,\r\n                currentGame: state.currentGame + 1,\r\n                xIsNext: true,\r\n                isRoundStarted: true,\r\n            };\r\n\r\n            //сетаем имена игроков в стейт\r\n        case SET_NAMES_GAMES:\r\n            return {\r\n                ...state,\r\n                gamer1: action.name1 !== '' ? action.name1 : state.gamer1,\r\n                gamer2: action.name2 !== '' ? action.name2 : state.gamer2,\r\n            };\r\n\r\n            //находим победителя и сетаем его очки в таблицу\r\n        case SET_WINNER:\r\n            let newGamesArray = state.games.map((g) => {\r\n                if(state.currentGame === g.id && action.winner === 'DRAW'){\r\n                    return {\r\n                        id: g.id,\r\n                        winnerPointsGamer1: 0,\r\n                        winnerPointsGamer2: 0,\r\n                    }\r\n                } else if(state.currentGame === g.id){\r\n                    return {\r\n                        id: g.id,\r\n                        winnerPointsGamer1: action.winner === 'X' ? 1 : 0,\r\n                        winnerPointsGamer2: action.winner === 'O' ? 1 : 0,\r\n                    }\r\n                } else{\r\n                    return g;\r\n                }\r\n            });\r\n            return {\r\n                ...state,\r\n                games: newGamesArray,\r\n            };\r\n\r\n            //подсчитываем итоговые очки и заносим в стейт\r\n        case SET_TOTAL_SCORE:\r\n            let newTotalScore = {\r\n                allPointsGamer1: state.games.map(g => g.winnerPointsGamer1).reduce((sum, current)=>\r\n                {return sum + current},0),// [0,0,0,0,0]\r\n                allPointsGamer2: state.games.map(g => g.winnerPointsGamer2).reduce((sum, current)=>\r\n                {return sum + current},0),// [0,0,0,0,0]\r\n            };\r\n            return {\r\n                ...state,\r\n                totalScore: newTotalScore,\r\n                isRoundStarted: false,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const startGameWithComputerTC = (id) => async (dispatch, getState) => {\r\n    await dispatch(onMovePlayer(id));\r\n    let winner = await calculateWinner(getState().main.squares);\r\n    if (!winner) {\r\n        setTimeout(() => {\r\n            dispatch(startGameWithComputer());\r\n        }, 2000);\r\n    } else {\r\n        dispatch(setWinner(winner))\r\n    }\r\n};\r\n\r\nexport const setWinnerTC = (winner) => async (dispatch) => {\r\n    await dispatch(setWinner(winner));\r\n    dispatch(setTotalScore())\r\n};\r\n\r\nexport default mainReducer;","import React, {Component} from 'react';\r\nimport '../App.css';\r\nimport Cell from \"../components/Cell/Cell\";\r\nimport Field from \"../components/Field/Field\";\r\nimport {startGameWithComputerTC} from \"../redux/main-reducer\";\r\nimport {clickOnCell, closePopUp, setNamesGamesTC, startGame, onMovePlayer, exitTheGame} from '../redux/actions'\r\nimport {connect} from \"react-redux\";\r\nimport {calculateWinner} from \"../utility/objects-helpers\";\r\n\r\n\r\nclass FieldContainer extends Component {\r\n\r\n    onClickCell = (id) => {\r\n        if (calculateWinner(this.props.squares) || this.props.squares[this.props.squares.id]) {\r\n            return;\r\n        }\r\n        this.props.clickOnCell(id);\r\n        calculateWinner(this.props.squares);\r\n    };\r\n\r\n    render() {\r\n        let cells = this.props.squares.map((square, i) => {\r\n            return <Cell key={i} value={square.value} id={square.id} isStartGame={this.props.isStartGame}\r\n                         xIsNext={this.props.xIsNext} onClickCell={this.onClickCell}\r\n                         isGameWithComputer={this.props.isGameWithComputer}\r\n                         startGameWithComputerTC={this.props.startGameWithComputerTC}\r\n                         onMovePlayer={this.props.onMovePlayer} isRoundStarted={this.props.isRoundStarted}\r\n            />\r\n        });\r\n\r\n        return <article className={'field'}>\r\n            <Field isPopUpActive={this.props.isPopUpActive}\r\n                   exitTheGame={this.props.exitTheGame}\r\n                   currentGame={this.props.currentGame}\r\n                   cells={cells}\r\n                   closePopUp={this.props.closePopUp}\r\n                   setNamesGamesTC={this.props.setNamesGamesTC}\r\n                   gamer1={this.props.gamer1}\r\n                   gamer2={this.props.gamer2}\r\n                   totalScore={this.props.totalScore}\r\n                   isRoundStarted={this.props.isRoundStarted}\r\n            />\r\n        </article>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isGameWithComputer: state.main.isGameWithComputer,\r\n        squares: state.main.squares,\r\n        xIsNext: state.main.xIsNext,\r\n        isStartGame: state.main.isStartGame,\r\n        isPopUpActive: state.main.isPopUpActive,\r\n        currentGame: state.main.currentGame,\r\n        gamer1: state.main.gamer1,\r\n        gamer2: state.main.gamer2,\r\n        totalScore: state.main.totalScore,\r\n        isRoundStarted: state.main.isRoundStarted,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    clickOnCell, closePopUp, startGame, setNamesGamesTC,\r\n    startGameWithComputerTC, onMovePlayer, exitTheGame,\r\n})(FieldContainer);","import React from 'react';\r\nimport styles from './ResultTable.module.css';\r\n\r\n\r\nfunction ResultTable({games, gamer1, gamer2, allPointsGamer1, allPointsGamer2, currentGame}) {\r\n\r\n    return <table className={styles.container} cellPadding={15}>\r\n        {/*<caption className={styles.headlineTable}>Result table</caption>*/}\r\n        <thead>\r\n        <tr>\r\n            <th>{gamer1}</th>\r\n            {games.map(g => {\r\n                return <td key={g.id} className={currentGame > g.id ? styles.activeGame : undefined}>\r\n                    {g.winnerPointsGamer1}\r\n                </td>\r\n            })}\r\n            <td>{allPointsGamer1}</td>\r\n        </tr>\r\n        <tr>\r\n            <th>{gamer2}</th>\r\n            {games.map(g => {\r\n                return <td key={g.id} className={currentGame > g.id ? styles.activeGame : undefined}>\r\n                    {g.winnerPointsGamer2}\r\n                </td>\r\n            })}\r\n            <td>{allPointsGamer2}</td>\r\n        </tr>\r\n        <tr>\r\n            <th>№ round</th>\r\n            {games.map(g => {\r\n                return <td key={g.id} className={currentGame >= g.id ? styles.activeGame : undefined}>\r\n                    {g.id}\r\n                </td>\r\n            })}\r\n            <td>Total</td>\r\n        </tr>\r\n        </thead>\r\n    </table>\r\n}\r\n\r\nexport default ResultTable;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport ResultTable from \"../components/ResultTable/ResultTable\";\r\n\r\nfunction ResultTableContainer(props) {\r\n    return <ResultTable {...props}/>\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    gamer1: state.main.gamer1,\r\n    gamer2: state.main.gamer2,\r\n    games: state.main.games,\r\n    allPointsGamer1: state.main.totalScore.allPointsGamer1,\r\n    allPointsGamer2: state.main.totalScore.allPointsGamer2,\r\n    currentGame: state.main.currentGame,\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(ResultTableContainer);","import React from 'react';\r\nimport styles from '../Buttons/Buttons.module.css';\r\n\r\n\r\nfunction GameModeSwitches({exitTheGame, continueGame}) {\r\n\r\n    return <div className={styles.wrapperForButtons}>\r\n\r\n        <button className={styles.button} onClick={exitTheGame}>\r\n            EXIT FROM THIS MODE\r\n        </button>\r\n        <button className={styles.button} onClick={continueGame}>\r\n            CONTINUE ( NEW ROUND )\r\n        </button>\r\n\r\n    </div>\r\n}\r\n\r\nexport default GameModeSwitches;","import React from 'react';\r\nimport styles from '../Buttons/Buttons.module.css';\r\n\r\n\r\nfunction ButtonsForChooseModeGame({startGame, gameWithComputer}) {\r\n\r\n    return <section className={styles.wrapperForButtons}>\r\n\r\n        <button className={styles.button}\r\n                onClick={startGame}>\r\n            START GAME WITH FRIEND\r\n        </button>\r\n        <button className={styles.button}\r\n                onClick={gameWithComputer}>\r\n            START GAME WITH COMPUTER\r\n        </button>\r\n\r\n    </section>\r\n}\r\n\r\nexport default ButtonsForChooseModeGame;","import React from 'react';\r\nimport styles from './Buttons.module.css';\r\nimport GameModeSwitches from \"../GameModeSwitches/GameModeSwitches\";\r\nimport ButtonsForChooseModeGame from \"../ButtonsForChooseModeGame/ButtonsForChooseModeGame\";\r\n\r\n\r\nfunction Buttons({\r\n                     isStartGame, winner, fullness, status, startGame, exitTheGame,\r\n                     gameWithComputer, continueGame, currentGame\r\n                 }) {\r\n\r\n    return <article className={styles.container}>\r\n            {currentGame === 6 ? <h3>GAME OVER</h3> : ((isStartGame) ?\r\n                    <div className={styles.wrapperForText}>\r\n                        <h3>\r\n                            THE ROUND {winner || (fullness === 0) ? 'OVER' : 'STARTED'}\r\n                        </h3>\r\n                        <h4>{status}</h4>\r\n                    </div>\r\n                    : <ButtonsForChooseModeGame\r\n                        startGame={startGame} gameWithComputer={gameWithComputer}/>\r\n            )}\r\n        <section>\r\n            {(winner || (fullness === 0)) && <GameModeSwitches continueGame={continueGame}\r\n                                                               exitTheGame={exitTheGame}/>}\r\n        </section>\r\n\r\n    </article>\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {continueGame, gameWithComputer, startGame, exitTheGame} from \"../redux/actions\";\r\nimport Buttons from \"../components/Buttons/Buttons\";\r\nimport {calculateWinner} from \"../utility/objects-helpers\";\r\nimport {setWinnerTC} from \"../redux/main-reducer\";\r\n\r\n\r\nfunction ButtonsContainer(props) {\r\n\r\n    const winner = calculateWinner(props.squares);\r\n    const fullness = props.squares.filter(sq => sq.value === null).length;\r\n    let status;\r\n    if (winner) {\r\n        status = 'Winner : ' + (winner.toUpperCase() === \"X\" ? props.gamer1 : props.gamer2);\r\n        props.setWinnerTC(winner);\r\n    } else if (!winner && fullness === 0) {\r\n        status = '0 : 0 --- DRAW';\r\n        props.setWinnerTC('DRAW')\r\n    } else {\r\n        status = 'Next move : ' + (props.xIsNext ? props.gamer1\r\n            : props.gamer2);\r\n    }\r\n\r\n    return <Buttons exitTheGame={props.exitTheGame}\r\n                    gameWithComputer={props.gameWithComputer}\r\n                    continueGame={props.continueGame}\r\n                    winner={winner}\r\n                    fullness={fullness}\r\n                    status={status}\r\n                    startGame={props.startGame}\r\n                    isStartGame={props.isStartGame}\r\n                    currentGame={props.currentGame}\r\n/>;\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        isGameWithComputer: state.main.isGameWithComputer,\r\n        isStartGame: state.main.isStartGame,\r\n        gamer1: state.main.gamer1,\r\n        gamer2: state.main.gamer2,\r\n        xIsNext: state.main.xIsNext,\r\n        squares: state.main.squares,\r\n        currentGame: state.main.currentGame,\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps,\r\n    {exitTheGame, gameWithComputer, continueGame,\r\n        startGame, setWinnerTC})(ButtonsContainer);","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header/Header\";\nimport FieldContainer from \"./containers/FieldContainer\";\nimport ResultTableContainer from \"./containers/ResultTableContainer\";\nimport ButtonsContainer from \"./containers/ButtonsContainer\";\n\n\nfunction App() {\n    return (\n        <article className=\"App\">\n            <section className='wrapperApp'>\n                <section className='wrapperHeader'>\n                    <Header/>\n                    <ResultTableContainer/>\n                </section>\n                <section className='mainField'>\n                    <FieldContainer/>\n                    <ButtonsContainer/>\n                </section>\n            </section>\n        </article>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {createStore, applyMiddleware, combineReducers} from \"redux\";\r\nimport mainReducer from \"./main-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst reducers = combineReducers({\r\n    main: mainReducer,\r\n    form: formReducer}\r\n);\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ResultTable_container__2RN4S\",\"headlineTable\":\"ResultTable_headlineTable__2PaJe\",\"activeGame\":\"ResultTable_activeGame__1cV3D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3Nmvo\",\"valueX\":\"Cell_valueX__343s9\",\"value0\":\"Cell_value0__1PPLu\",\"withoutBorder\":\"Cell_withoutBorder__2MOnP\",\"img\":\"Cell_img__w2zy6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"PopUp_container__37WWP\",\"popupMain\":\"PopUp_popupMain__2YoG4\",\"popup\":\"PopUp_popup__1DLpn\",\"span\":\"PopUp_span__2dB1b\",\"name\":\"PopUp_name__12sBh\",\"input\":\"PopUp_input__1gOnP\",\"button\":\"PopUp_button__1UzTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pseudo\":\"Header_pseudo__2jN7V\"};"],"sourceRoot":""}